diff -Nru InverseForm.orig/library/datasets/get_dataloaders.py InverseForm/library/datasets/get_dataloaders.py
--- InverseForm.orig/library/datasets/get_dataloaders.py	2022-10-01 02:19:32.698686295 +0800
+++ InverseForm/library/datasets/get_dataloaders.py	2022-10-01 02:31:04.695403168 +0800
@@ -34,12 +34,7 @@
         label_transform=target_transform,
         eval_folder=None)
 
-    if cfg.apex:
-        from library.datasets.sampler import DistributedSampler
-        val_sampler = DistributedSampler(val_frame, pad=False, permutation=False,
-                                         consecutive_sample=False)
-    else:
-        val_sampler = None
+    val_sampler = None
 
     val_loader = DataLoader(val_frame, batch_size=batch_size,
                             num_workers=num_workers // 2,
diff -Nru InverseForm.orig/models/model_loader.py InverseForm/models/model_loader.py
--- InverseForm.orig/models/model_loader.py	2022-10-01 02:19:32.698686295 +0800
+++ InverseForm/models/model_loader.py	2022-10-01 02:31:04.695403168 +0800
@@ -4,10 +4,8 @@
     updated_model_dict = {}
     lookup_table = {}
     for k_model, v_model in model_dict.items():
-        if k_model.startswith('model') or k_model.startswith('module'):
+        if k_model.startswith('backbone'):
             k_updated = '.'.join(k_model.split('.')[1:])
-            if k_updated.startswith('backbone'):
-                k_updated = '.'.join(k_updated.split('.')[1:])
 
             lookup_table[k_updated] = k_model
             updated_model_dict[k_updated] = k_model
diff -Nru InverseForm.orig/models/mynn.py InverseForm/models/mynn.py
--- InverseForm.orig/models/mynn.py	2022-10-01 02:19:32.698686295 +0800
+++ InverseForm/models/mynn.py	2022-10-01 02:31:04.695403168 +0800
@@ -37,8 +37,6 @@
 import torch.nn as nn
 from utils.config import cfg
 
-from apex import amp
-
 from runx.logx import logx
 
 
@@ -69,7 +67,6 @@
                 module.bias.data.zero_()
 
 
-@amp.float_function
 def Upsample(x, size):
     """
     Wrapper Around the Upsample Call
@@ -78,7 +75,6 @@
                                      align_corners=align_corners)
 
 
-@amp.float_function
 def Upsample2(x):
     """
     Wrapper Around the Upsample Call
@@ -106,7 +102,7 @@
     if cfg.OPTIONS.TORCH_VERSION >= 1.5:
         x_scaled = torch.nn.functional.interpolate(
             x, size=y_size, mode='bilinear',
-            align_corners=align_corners, recompute_scale_factor=True)
+            align_corners=align_corners)
     else:
         x_scaled = torch.nn.functional.interpolate(
             x, size=y_size, mode='bilinear',
diff -Nru InverseForm.orig/models/ocrnet.py InverseForm/models/ocrnet.py
--- InverseForm.orig/models/ocrnet.py	2022-10-01 02:19:32.698686295 +0800
+++ InverseForm/models/ocrnet.py	2022-10-01 02:31:04.695403168 +0800
@@ -186,8 +186,7 @@
                 bias=True)
 
     def forward(self, inputs):
-        assert 'images' in inputs
-        x = inputs['images']
+        x = inputs[:, 0:3, :, :]
 
         _, _, high_level_features = self.backbone(x)
 
@@ -203,10 +202,10 @@
             edge_output_aux = scale_as(edge_output_aux, x)
 
         if self.training:
-            gts = inputs['gts']
+            gts = inputs[:, 3:4, :, :].squeeze(dim = 1)
             #main_loss = self.criterion(cls_out, gts, do_rmi=True)
             if self.has_edge_head:
-                edge_gts = inputs['edge']
+                edge_gts = inputs[:, 4:5, :, :]
                 main_loss = self.criterion((cls_out, edge_output), (gts, edge_gts), do_rmi=True)
                 aux_loss = self.criterion((aux_out, edge_output_aux), (gts, edge_gts),
                                           do_rmi=cfg.LOSS.OCR_AUX_RMI)
@@ -220,9 +219,9 @@
             return loss
         else:
             if self.has_edge_head:
-                output_dict = {'pred': cls_out, 'edge_pred': edge_output}
+                output_dict = torch.cat((cls_out, edge_output), dim=1)
             else:
-                output_dict = {'pred': cls_out}
+                output_dict = cls_out
             return output_dict
                         
             
@@ -250,8 +249,7 @@
                 bias=True)
 
     def forward(self, inputs):
-        assert 'images' in inputs
-        x = inputs['images']
+        x = inputs[:, 0:3, :, :]
 
         _, _, high_level_features = self.backbone(x)
         cls_out = self.hrhead(high_level_features)
@@ -266,10 +264,10 @@
             edge_output_aux = scale_as(edge_output_aux, x)        
 
         if self.training:
-            gts = inputs['gts']
+            gts = inputs[:, 3:4, :, :].squeeze(dim = 1)
             #main_loss = self.criterion(cls_out, gts, do_rmi=True)
             if self.has_edge_head:
-                edge_gts = inputs['edge']
+                edge_gts = inputs[:, 4:5, :, :]
                 main_loss = self.criterion((cls_out, edge_output), (gts, edge_gts), do_rmi=True)
                 aux_loss = self.criterion((aux_out, edge_output_aux), (gts, edge_gts),
                                           do_rmi=cfg.LOSS.OCR_AUX_RMI)
@@ -283,9 +281,9 @@
             return loss
         else:
             if self.has_edge_head:
-                output_dict = {'pred': cls_out, 'edge_pred': edge_output}
+                output_dict = torch.cat((cls_out, edge_output), dim=1)
             else:
-                output_dict = {'pred': cls_out}
+                output_dict = cls_out
             return output_dict
             
 
diff -Nru InverseForm.orig/utils/config.py InverseForm/utils/config.py
--- InverseForm.orig/utils/config.py	2022-10-01 02:19:32.698686295 +0800
+++ InverseForm/utils/config.py	2022-10-01 02:31:04.695403168 +0800
@@ -65,7 +65,7 @@
 #Attribute Dictionary for Dataset
 __C.DATASET = AttrDict()
 #Cityscapes Dir Location
-__C.DATASET.CITYSCAPES_DIR = '/prj/neo_lv/scratch/cityscape'
+__C.DATASET.CITYSCAPES_DIR = 'cityscapes'
 
 __C.DATASET.CITYSCAPES_SPLITS = 3
 __C.DATASET.MEAN = [0.485, 0.456, 0.406]
@@ -239,13 +239,7 @@
     
     if syncbn:
         cfg.syncbn = True
-        if apex:
-            cfg.apex=True
-            import apex
-            __C.MODEL.BN = 'apex-syncnorm'
-            __C.MODEL.BNFUNC = apex.parallel.SyncBatchNorm
-        else:
-            raise Exception('No Support for SyncBN without Apex')
+        raise Exception('No Support for SyncBN without Apex')
     else:
         __C.MODEL.BNFUNC = torch.nn.BatchNorm2d
         print('Using regular batch norm')
