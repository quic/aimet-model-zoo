diff --git a/vision/ssd/ssd.py b/vision/ssd/ssd.py
index 962b9a2..d5e6676 100644
--- a/vision/ssd/ssd.py
+++ b/vision/ssd/ssd.py
@@ -24,7 +24,24 @@ class SSD(nn.Module):
         self.classification_headers = classification_headers
         self.regression_headers = regression_headers
         self.is_test = is_test
-        self.config = config
+        #self.config = config
+
+        self.image_size = 300
+        self.image_mean = np.array([127, 127, 127])  # RGB layout
+        self.image_std = 128.0
+        self.iou_threshold = 0.45
+        self.center_variance = 0.1
+        self.size_variance = 0.2
+
+        self.specs = [box_utils.SSDSpec(19, 16, box_utils.SSDBoxSizes(60, 105), [2, 3]),
+                      box_utils.SSDSpec(10, 32, box_utils.SSDBoxSizes(105, 150), [2, 3]),
+                      box_utils.SSDSpec(5, 64, box_utils.SSDBoxSizes(150, 195), [2, 3]),
+                      box_utils.SSDSpec(3, 100, box_utils.SSDBoxSizes(195, 240), [2, 3]),
+                      box_utils.SSDSpec(2, 150, box_utils.SSDBoxSizes(240, 285), [2, 3]),
+                      box_utils.SSDSpec(1, 300, box_utils.SSDBoxSizes(285, 330), [2, 3])]
+
+
+        self.gen_priors = box_utils.generate_ssd_priors(self.specs, self.image_size)
 
         # register layers in source_layer_indexes by adding them to a module list
         self.source_layer_add_ons = nn.ModuleList([t[1] for t in source_layer_indexes
@@ -34,8 +51,9 @@ class SSD(nn.Module):
         else:
             self.device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
         if is_test:
-            self.config = config
-            self.priors = config.priors.to(self.device)
+            #self.config = config
+            #self.priors = config.priors.to(self.device)
+            self.priors = self.gen_priors.to(self.device)
             
     def forward(self, x: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
         confidences = []
@@ -90,7 +108,7 @@ class SSD(nn.Module):
         if self.is_test:
             confidences = F.softmax(confidences, dim=2)
             boxes = box_utils.convert_locations_to_boxes(
-                locations, self.priors, self.config.center_variance, self.config.size_variance
+                locations.cpu(), self.priors.cpu(), self.center_variance, self.size_variance
             )
             boxes = box_utils.center_form_to_corner_form(boxes)
             return confidences, boxes
@@ -109,7 +127,9 @@ class SSD(nn.Module):
         return confidence, location
 
     def init_from_base_net(self, model):
-        self.base_net.load_state_dict(torch.load(model, map_location=lambda storage, loc: storage), strict=True)
+        state_dict = torch.load(model, map_location=lambda storage, loc: storage)
+        state_dict = {k[9:]: v for k, v in state_dict.items() if k.startswith('features')}
+        self.base_net.load_state_dict(state_dict, strict=True)
         self.source_layer_add_ons.apply(_xavier_init_)
         self.extras.apply(_xavier_init_)
         self.classification_headers.apply(_xavier_init_)
